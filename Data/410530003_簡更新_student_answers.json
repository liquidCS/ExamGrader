{
  "1": {
    "text": "使用tail recubion\nint fibc int n, int a, int b) {\nif(n==0){\nreturn a;\n}\nreturn fib(n-1, b, a+b);\n}",
    "tables": [],
    "figures": []
  },
  "2a": {
    "text": "T(n) => T(n) ≤ (1 + 7/6 + (7/6)^2 + ... ) cn = ((1-(7/6)^n)/(1-7/6))cn = ∞cn = O(n)",
    "tables": [],
    "figures": []
  },
  "2b": {
    "text": "n = 2^(2k) T(n) = 2T(√n) + logn\nT(n) = T(2^(2k)) = 2T(2^(2^(k-1))) + 2^k\n=> 2 × (2 × T(2^(2^(k-2))) + 2^(k+1)) + 2^k\n=> 2^2 × T(2^(2^(k-2))) + 2^k + 2^k\n; k\n2^k × T(2) + k × 2^k => O(k × 2^k) => O(log n log log n)",
    "tables": [],
    "figures": []
  },
  "3": {
    "text": "heap 要是 complete binary tree, 最多會有 2/n 個 node 在底部\n公式 「n/(2^(k+1))」代入口符合最多有 n/2 nodes\n則h=k、有 「n/(2^(k+1))」個 node 在高為k時,\nh = k+1 有「n/2^(k+1)」\n∴ 得證最多有「n/(2^(k+1))」nodes 在高為h時",
    "tables": [],
    "figures": []
  },
  "4": {
    "text": "會 overflow, 因為每使小數變很大\n是 Counting sort 的複雜度是 O(n+k), k太大也會有機會提\nlinear time.",
    "tables": [],
    "figures": []
  },
  "5a": {
    "text": "LCS(i, j, k) = { 0, if i=0 or j=0 or k=0; LCS(i-1, j-1, k-1) + 1 if x_i = y_j = z_k; max{LCS(i-1, j, k), LCS(i, j-1, k), LCS(i, j, k+1)} otherwise.\nO(n k)\n```\n```\n（續）\n(b) 如果取 LCS(LCS(x,y),Z) 因LCS有多組解,不能保證\nLCS(x,y)是對子的最佳解\n如: x=badly, z=badminton\ny= bad school\nLCS(x,y) = badl\nLcs (LCS(X,Y), K) = bad",
    "tables": [],
    "figures": []
  },
  "5c": {
    "text": "recurrence: LRS(i,j) = {0, if i=0 or j=0\n1+ LRS(i-1, j-1), if char_i = char_j and i ≠ j\nmax(LRS(i, j-1), LRS(i-1, j)), otherwise\n\n[TABLE]\nAns: 4",
    "tables": [
      "| i\\j | A | T | A | C | T | C | G | A | G |\n|-----|---|---|---|---|---|---|---|---|---|\n| 0   | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 |\n| A   | 0 | 0 | 1 | 1 | 1 | 1 | 1 | 1 | 1 |\n| T   | 0 | 0 | 1 | 1 | 2 | 2 | 2 | 2 | 2 |\n| A   | 0 | 0 | 1 | 1 | 2 | 3 | 3 | 3 | 3 |\n| C   | 0 | 0 | 1 | 1 | 2 | 3 | 3 | 3 | 3 |\n| T   | 0 | 0 | 1 | 1 | 2 | 3 | 3 | 3 | 3 |\n| C   | 0 | 0 | 1 | 2 | 2 | 3 | 3 | 3 | 3 |\n| G   | 0 | 0 | 1 | 2 | 2 | 3 | 3 | 3 | 4 |\n| A   | 0 | 1 | 1 | 2 | 2 | 3 | 3 | 3 | 4 |\n| G   | 0 | 1 | 1 | 2 | 2 | 3 | 4 | 4 | 4 |"
    ],
    "figures": []
  },
  "5d": {
    "text": "recurrence: LPS(i, j) = {0, if i=0 or j=0\nLPS(i-1, j-1) + 1, if x[i] == y[j]\nmax{LPS(i-1, j, K), LPS(i, j-1, K)}, otherwise\n\n追蹤:\n[TABLE]\n\nAns: carac\n```\n```",
    "tables": [
      "| i\\j | null | c | h | a | r | a | c | t | e | r |\n|-----|------|---|---|---|---|---|---|---|---|---|\n| null | 0    | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 |\n| r    | 0    | 0 | 0 | 0 | 1 | 1 | 1 | 1 | 1 | 2 |\n| e    | 0    | 0 | 0 | 0 | 1 | 1 | 1 | 1 | 2 | 2 |\n| t    | 0    | 0 | 0 | 0 | 1 | 1 | 1 | 2 | 2 | 2 |\n| c    | 0    | 1 | 1 | 1 | 2 | 2 | 2 | 2 | 2 | 2 |\n| a    | 0    | 1 | 1 | 2 | 2 | 2 | 2 | 2 | 2 | 2 |\n| r    | 0    | 1 | 1 | 2 | 3 | 3 | 3 | 3 | 3 | 4 |\n| a    | 0    | 1 | 1 | 3 | 3 | 4 | 4 | 4 | 4 | 4 |\n| c    | 0    | 1 | 2 | 3 | 4 | 4 | 5 | 4 | 5 | 4 | 5 |"
    ],
    "figures": []
  },
  "6": {
    "text": "recurrence\ndp (V, i) = { 0, j = 0 or i = 0\nmax(dp(i-1, j), dp(i-1, j-v_i) + w_i), otherwise\n令dp為組合出價值為j的最小重量。\n[TABLE]",
    "tables": [
      "| item | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 總value |\n|------|---|---|---|---|---|---|---|---|---|---|----|----|----|---------|\n| 1    | 0 | 100 | × | × | × | × | × | × | × | × | ×  | ×  | ×  |         |\n| 2    | 0 | 100 | 200 | 300 | × | × | × | × | × | × | ×  | ×  | ×  |         |\n| 3    | 0 | 100 | 200 | 300 | 250 | 350 | 450 | 550 |    |    |    |    |    |         |\n| 4    | 0 | 100 | 200 | 300 | 250 | 300 | 400 | 500 |    |    |    |    |    |         |"
    ],
    "figures": []
  },
  "7": {
    "text": "Sort by finish time\nH(i) = max {l = {1, 2, ..., i-1} | f_l ≤ s_i}\nA(i) = { 0 , if i=0\nmax{A(i-1), A(H(i)) + V_i}, otherwise\n[TABLE]\nAns. 7\n<FIGURE>The figure contains a series of horizontal lines representing activities 1 through 6. The x-axis represents time, from left to right. Each line starts at the activity's start time and ends at its finish time. The value 'v' associated with activities 3, 4, 5, and 6 are shown adjacent to the activity line. The values are: v=1 (near act 1), v=3(near act 2), v=3 (near act 3), v=2 (near act 4), v=4 (near act 5), v=5 (near act 6).\n</FIGURE>\n{ activity: 1, 5, 6\nvalue : 10\n```",
    "tables": [
      "| activity | 1 | 2 | 3 | 4 | 5 | 6 |\n|----------|---|---|---|---|---|---|\n| start    | 1 | 1 | 2 | 3 | 3 | 5 |\n| finish   | 3 | 4 | 4 | 4 | 5 | 5 |\n| value    | 1 | 3 | 3 | 2 | 4 | 5 |\n| H(i)     | 0 | 0 | 0 | 1 | 1 | 5 |\n| A(i)     | 1 | 3 | 3 | 3 | 5 | 10 |"
    ],
    "figures": []
  }
}